State 99 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: decl_list

    2 decl_list: decl decl_list
    3          | decl

    4 decl: var_decl
    5     | func_decl

    6 var_decl: type ID SEM_COL
    7         | type ID O_BRACK NUM C_BRACK SEM_COL

    8 type: INT
    9     | VOID

   10 func_decl: type ID O_PAREN params C_PAREN compound_stmt

   11 params: param_list
   12       | VOID

   13 param_list: param COMMA param_list
   14           | param

   15 param: type ID
   16      | type ID O_BRACK C_BRACK

   17 compound_stmt: O_BRACE local_decl stmt_list C_BRACE

   18 local_decl: var_decl local_decl
   19           | ε

   20 stmt_list: stmt stmt_list
   21          | ε

   22 stmt: expr_stmt
   23     | compound_stmt
   24     | selection_stmt
   25     | iteration_stmt
   26     | return_stmt

   27 expr_stmt: expr SEM_COL
   28          | SEM_COL

   29 selection_stmt: IF O_PAREN expr C_PAREN stmt
   30               | IF O_PAREN expr C_PAREN stmt ELSE stmt

   31 iteration_stmt: WHILE O_PAREN expr C_PAREN stmt

   32 return_stmt: RETURN SEM_COL
   33            | RETURN expr SEM_COL

   34 expr: var SET expr
   35     | simple_expr

   36 var: ID
   37    | ID O_BRACK expr C_BRACK

   38 simple_expr: add_expr rel_op add_expr
   39            | add_expr

   40 rel_op: LEQ
   41       | LT
   42       | GT
   43       | GEQ
   44       | EQ
   45       | NEQ

   46 add_expr: add_expr add_op term
   47         | term

   48 add_op: PLUS
   49       | SUB

   50 term: term mul_op factor
   51     | factor

   52 mul_op: MULT
   53       | DIV

   54 factor: O_PAREN expr C_PAREN
   55       | var
   56       | call
   57       | NUM

   58 call: ID O_PAREN args C_PAREN

   59 args: arg_list
   60     | ε

   61 arg_list: expr COMMA arg_list
   62         | expr


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    ELSE (258) 30
    IF (259) 29 30
    INT (260) 8
    RETURN (261) 32 33
    VOID (262) 9 12
    WHILE (263) 31
    PLUS (264) 48
    SUB (265) 49
    MULT (266) 52
    DIV (267) 53
    LT (268) 41
    LEQ (269) 40
    GT (270) 42
    GEQ (271) 43
    EQ (272) 44
    NEQ (273) 45
    SET (274) 34
    SEM_COL (275) 6 7 27 28 32 33
    COMMA (276) 13 61
    O_PAREN (277) 10 29 30 31 54 58
    C_PAREN (278) 10 29 30 31 54 58
    O_BRACK (279) 7 16 37
    C_BRACK (280) 7 16 37
    O_BRACE (281) 17
    C_BRACE (282) 17
    ID <str> (283) 6 7 10 15 16 36 37 58
    NUM <num> (284) 7 57


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    program <decl> (31)
        on left: 1
        on right: 0
    decl_list <decl> (32)
        on left: 2 3
        on right: 1 2
    decl <decl> (33)
        on left: 4 5
        on right: 2 3
    var_decl <decl> (34)
        on left: 6 7
        on right: 4 18
    type <type> (35)
        on left: 8 9
        on right: 6 7 10 15 16
    func_decl <decl> (36)
        on left: 10
        on right: 5
    params <param_list> (37)
        on left: 11 12
        on right: 10
    param_list <param_list> (38)
        on left: 13 14
        on right: 11 13
    param <param_list> (39)
        on left: 15 16
        on right: 13 14
    compound_stmt <stmt> (40)
        on left: 17
        on right: 10 23
    local_decl <decl> (41)
        on left: 18 19
        on right: 17 18
    stmt_list <stmt> (42)
        on left: 20 21
        on right: 17 20
    stmt <stmt> (43)
        on left: 22 23 24 25 26
        on right: 20 29 30 31
    expr_stmt <stmt> (44)
        on left: 27 28
        on right: 22
    selection_stmt <stmt> (45)
        on left: 29 30
        on right: 24
    iteration_stmt <stmt> (46)
        on left: 31
        on right: 25
    return_stmt <stmt> (47)
        on left: 32 33
        on right: 26
    expr <expr> (48)
        on left: 34 35
        on right: 27 29 30 31 33 34 37 54 61 62
    var <expr> (49)
        on left: 36 37
        on right: 34 55
    simple_expr <expr> (50)
        on left: 38 39
        on right: 35
    rel_op <expr> (51)
        on left: 40 41 42 43 44 45
        on right: 38
    add_expr <expr> (52)
        on left: 46 47
        on right: 38 39 46
    add_op <expr> (53)
        on left: 48 49
        on right: 46
    term <expr> (54)
        on left: 50 51
        on right: 46 47 50
    mul_op <expr> (55)
        on left: 52 53
        on right: 50
    factor <expr> (56)
        on left: 54 55 56 57
        on right: 50 51
    call <expr> (57)
        on left: 58
        on right: 56
    args <expr> (58)
        on left: 59 60
        on right: 58
    arg_list <expr> (59)
        on left: 61 62
        on right: 59 61


State 0

    0 $accept: • program $end

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    program    go to state 3
    decl_list  go to state 4
    decl       go to state 5
    var_decl   go to state 6
    type       go to state 7
    func_decl  go to state 8


State 1

    8 type: INT •

    $default  reduce using rule 8 (type)


State 2

    9 type: VOID •

    $default  reduce using rule 9 (type)


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: decl_list •

    $default  reduce using rule 1 (program)


State 5

    2 decl_list: decl • decl_list
    3          | decl •

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 3 (decl_list)

    decl_list  go to state 10
    decl       go to state 5
    var_decl   go to state 6
    type       go to state 7
    func_decl  go to state 8


State 6

    4 decl: var_decl •

    $default  reduce using rule 4 (decl)


State 7

    6 var_decl: type • ID SEM_COL
    7         | type • ID O_BRACK NUM C_BRACK SEM_COL
   10 func_decl: type • ID O_PAREN params C_PAREN compound_stmt

    ID  shift, and go to state 11


State 8

    5 decl: func_decl •

    $default  reduce using rule 5 (decl)


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 decl_list: decl decl_list •

    $default  reduce using rule 2 (decl_list)


State 11

    6 var_decl: type ID • SEM_COL
    7         | type ID • O_BRACK NUM C_BRACK SEM_COL
   10 func_decl: type ID • O_PAREN params C_PAREN compound_stmt

    SEM_COL  shift, and go to state 12
    O_PAREN  shift, and go to state 13
    O_BRACK  shift, and go to state 14


State 12

    6 var_decl: type ID SEM_COL •

    $default  reduce using rule 6 (var_decl)


State 13

   10 func_decl: type ID O_PAREN • params C_PAREN compound_stmt

    INT   shift, and go to state 1
    VOID  shift, and go to state 15

    type        go to state 16
    params      go to state 17
    param_list  go to state 18
    param       go to state 19


State 14

    7 var_decl: type ID O_BRACK • NUM C_BRACK SEM_COL

    NUM  shift, and go to state 20


State 15

    9 type: VOID •
   12 params: VOID •

    C_PAREN   reduce using rule 12 (params)
    $default  reduce using rule 9 (type)


State 16

   15 param: type • ID
   16      | type • ID O_BRACK C_BRACK

    ID  shift, and go to state 21


State 17

   10 func_decl: type ID O_PAREN params • C_PAREN compound_stmt

    C_PAREN  shift, and go to state 22


State 18

   11 params: param_list •

    $default  reduce using rule 11 (params)


State 19

   13 param_list: param • COMMA param_list
   14           | param •

    COMMA  shift, and go to state 23

    $default  reduce using rule 14 (param_list)


State 20

    7 var_decl: type ID O_BRACK NUM • C_BRACK SEM_COL

    C_BRACK  shift, and go to state 24


State 21

   15 param: type ID •
   16      | type ID • O_BRACK C_BRACK

    O_BRACK  shift, and go to state 25

    $default  reduce using rule 15 (param)


State 22

   10 func_decl: type ID O_PAREN params C_PAREN • compound_stmt

    O_BRACE  shift, and go to state 26

    compound_stmt  go to state 27


State 23

   13 param_list: param COMMA • param_list

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    type        go to state 16
    param_list  go to state 28
    param       go to state 19


State 24

    7 var_decl: type ID O_BRACK NUM C_BRACK • SEM_COL

    SEM_COL  shift, and go to state 29


State 25

   16 param: type ID O_BRACK • C_BRACK

    C_BRACK  shift, and go to state 30


State 26

   17 compound_stmt: O_BRACE • local_decl stmt_list C_BRACE

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 19 (local_decl)

    var_decl    go to state 31
    type        go to state 32
    local_decl  go to state 33


State 27

   10 func_decl: type ID O_PAREN params C_PAREN compound_stmt •

    $default  reduce using rule 10 (func_decl)


State 28

   13 param_list: param COMMA param_list •

    $default  reduce using rule 13 (param_list)


State 29

    7 var_decl: type ID O_BRACK NUM C_BRACK SEM_COL •

    $default  reduce using rule 7 (var_decl)


State 30

   16 param: type ID O_BRACK C_BRACK •

    $default  reduce using rule 16 (param)


State 31

   18 local_decl: var_decl • local_decl

    INT   shift, and go to state 1
    VOID  shift, and go to state 2

    $default  reduce using rule 19 (local_decl)

    var_decl    go to state 31
    type        go to state 32
    local_decl  go to state 34


State 32

    6 var_decl: type • ID SEM_COL
    7         | type • ID O_BRACK NUM C_BRACK SEM_COL

    ID  shift, and go to state 35


State 33

   17 compound_stmt: O_BRACE local_decl • stmt_list C_BRACE

    IF       shift, and go to state 36
    RETURN   shift, and go to state 37
    WHILE    shift, and go to state 38
    SEM_COL  shift, and go to state 39
    O_PAREN  shift, and go to state 40
    O_BRACE  shift, and go to state 26
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    $default  reduce using rule 21 (stmt_list)

    compound_stmt   go to state 43
    stmt_list       go to state 44
    stmt            go to state 45
    expr_stmt       go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    return_stmt     go to state 49
    expr            go to state 50
    var             go to state 51
    simple_expr     go to state 52
    add_expr        go to state 53
    term            go to state 54
    factor          go to state 55
    call            go to state 56


State 34

   18 local_decl: var_decl local_decl •

    $default  reduce using rule 18 (local_decl)


State 35

    6 var_decl: type ID • SEM_COL
    7         | type ID • O_BRACK NUM C_BRACK SEM_COL

    SEM_COL  shift, and go to state 12
    O_BRACK  shift, and go to state 14


State 36

   29 selection_stmt: IF • O_PAREN expr C_PAREN stmt
   30               | IF • O_PAREN expr C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 57


State 37

   32 return_stmt: RETURN • SEM_COL
   33            | RETURN • expr SEM_COL

    SEM_COL  shift, and go to state 58
    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 59
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 38

   31 iteration_stmt: WHILE • O_PAREN expr C_PAREN stmt

    O_PAREN  shift, and go to state 60


State 39

   28 expr_stmt: SEM_COL •

    $default  reduce using rule 28 (expr_stmt)


State 40

   54 factor: O_PAREN • expr C_PAREN

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 61
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 41

   36 var: ID •
   37    | ID • O_BRACK expr C_BRACK
   58 call: ID • O_PAREN args C_PAREN

    O_PAREN  shift, and go to state 62
    O_BRACK  shift, and go to state 63

    $default  reduce using rule 36 (var)


State 42

   57 factor: NUM •

    $default  reduce using rule 57 (factor)


State 43

   23 stmt: compound_stmt •

    $default  reduce using rule 23 (stmt)


State 44

   17 compound_stmt: O_BRACE local_decl stmt_list • C_BRACE

    C_BRACE  shift, and go to state 64


State 45

   20 stmt_list: stmt • stmt_list

    IF       shift, and go to state 36
    RETURN   shift, and go to state 37
    WHILE    shift, and go to state 38
    SEM_COL  shift, and go to state 39
    O_PAREN  shift, and go to state 40
    O_BRACE  shift, and go to state 26
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    $default  reduce using rule 21 (stmt_list)

    compound_stmt   go to state 43
    stmt_list       go to state 65
    stmt            go to state 45
    expr_stmt       go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    return_stmt     go to state 49
    expr            go to state 50
    var             go to state 51
    simple_expr     go to state 52
    add_expr        go to state 53
    term            go to state 54
    factor          go to state 55
    call            go to state 56


State 46

   22 stmt: expr_stmt •

    $default  reduce using rule 22 (stmt)


State 47

   24 stmt: selection_stmt •

    $default  reduce using rule 24 (stmt)


State 48

   25 stmt: iteration_stmt •

    $default  reduce using rule 25 (stmt)


State 49

   26 stmt: return_stmt •

    $default  reduce using rule 26 (stmt)


State 50

   27 expr_stmt: expr • SEM_COL

    SEM_COL  shift, and go to state 66


State 51

   34 expr: var • SET expr
   55 factor: var •

    SET  shift, and go to state 67

    $default  reduce using rule 55 (factor)


State 52

   35 expr: simple_expr •

    $default  reduce using rule 35 (expr)


State 53

   38 simple_expr: add_expr • rel_op add_expr
   39            | add_expr •
   46 add_expr: add_expr • add_op term

    PLUS  shift, and go to state 68
    SUB   shift, and go to state 69
    LT    shift, and go to state 70
    LEQ   shift, and go to state 71
    GT    shift, and go to state 72
    GEQ   shift, and go to state 73
    EQ    shift, and go to state 74
    NEQ   shift, and go to state 75

    $default  reduce using rule 39 (simple_expr)

    rel_op  go to state 76
    add_op  go to state 77


State 54

   47 add_expr: term •
   50 term: term • mul_op factor

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79

    $default  reduce using rule 47 (add_expr)

    mul_op  go to state 80


State 55

   51 term: factor •

    $default  reduce using rule 51 (term)


State 56

   56 factor: call •

    $default  reduce using rule 56 (factor)


State 57

   29 selection_stmt: IF O_PAREN • expr C_PAREN stmt
   30               | IF O_PAREN • expr C_PAREN stmt ELSE stmt

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 81
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 58

   32 return_stmt: RETURN SEM_COL •

    $default  reduce using rule 32 (return_stmt)


State 59

   33 return_stmt: RETURN expr • SEM_COL

    SEM_COL  shift, and go to state 82


State 60

   31 iteration_stmt: WHILE O_PAREN • expr C_PAREN stmt

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 83
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 61

   54 factor: O_PAREN expr • C_PAREN

    C_PAREN  shift, and go to state 84


State 62

   58 call: ID O_PAREN • args C_PAREN

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    $default  reduce using rule 60 (args)

    expr         go to state 85
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56
    args         go to state 86
    arg_list     go to state 87


State 63

   37 var: ID O_BRACK • expr C_BRACK

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 88
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 64

   17 compound_stmt: O_BRACE local_decl stmt_list C_BRACE •

    $default  reduce using rule 17 (compound_stmt)


State 65

   20 stmt_list: stmt stmt_list •

    $default  reduce using rule 20 (stmt_list)


State 66

   27 expr_stmt: expr SEM_COL •

    $default  reduce using rule 27 (expr_stmt)


State 67

   34 expr: var SET • expr

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 89
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56


State 68

   48 add_op: PLUS •

    $default  reduce using rule 48 (add_op)


State 69

   49 add_op: SUB •

    $default  reduce using rule 49 (add_op)


State 70

   41 rel_op: LT •

    $default  reduce using rule 41 (rel_op)


State 71

   40 rel_op: LEQ •

    $default  reduce using rule 40 (rel_op)


State 72

   42 rel_op: GT •

    $default  reduce using rule 42 (rel_op)


State 73

   43 rel_op: GEQ •

    $default  reduce using rule 43 (rel_op)


State 74

   44 rel_op: EQ •

    $default  reduce using rule 44 (rel_op)


State 75

   45 rel_op: NEQ •

    $default  reduce using rule 45 (rel_op)


State 76

   38 simple_expr: add_expr rel_op • add_expr

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    var       go to state 90
    add_expr  go to state 91
    term      go to state 54
    factor    go to state 55
    call      go to state 56


State 77

   46 add_expr: add_expr add_op • term

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    var     go to state 90
    term    go to state 92
    factor  go to state 55
    call    go to state 56


State 78

   52 mul_op: MULT •

    $default  reduce using rule 52 (mul_op)


State 79

   53 mul_op: DIV •

    $default  reduce using rule 53 (mul_op)


State 80

   50 term: term mul_op • factor

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    var     go to state 90
    factor  go to state 93
    call    go to state 56


State 81

   29 selection_stmt: IF O_PAREN expr • C_PAREN stmt
   30               | IF O_PAREN expr • C_PAREN stmt ELSE stmt

    C_PAREN  shift, and go to state 94


State 82

   33 return_stmt: RETURN expr SEM_COL •

    $default  reduce using rule 33 (return_stmt)


State 83

   31 iteration_stmt: WHILE O_PAREN expr • C_PAREN stmt

    C_PAREN  shift, and go to state 95


State 84

   54 factor: O_PAREN expr C_PAREN •

    $default  reduce using rule 54 (factor)


State 85

   61 arg_list: expr • COMMA arg_list
   62         | expr •

    COMMA  shift, and go to state 96

    $default  reduce using rule 62 (arg_list)


State 86

   58 call: ID O_PAREN args • C_PAREN

    C_PAREN  shift, and go to state 97


State 87

   59 args: arg_list •

    $default  reduce using rule 59 (args)


State 88

   37 var: ID O_BRACK expr • C_BRACK

    C_BRACK  shift, and go to state 98


State 89

   34 expr: var SET expr •

    $default  reduce using rule 34 (expr)


State 90

   55 factor: var •

    $default  reduce using rule 55 (factor)


State 91

   38 simple_expr: add_expr rel_op add_expr •
   46 add_expr: add_expr • add_op term

    PLUS  shift, and go to state 68
    SUB   shift, and go to state 69

    $default  reduce using rule 38 (simple_expr)

    add_op  go to state 77


State 92

   46 add_expr: add_expr add_op term •
   50 term: term • mul_op factor

    MULT  shift, and go to state 78
    DIV   shift, and go to state 79

    $default  reduce using rule 46 (add_expr)

    mul_op  go to state 80


State 93

   50 term: term mul_op factor •

    $default  reduce using rule 50 (term)


State 94

   29 selection_stmt: IF O_PAREN expr C_PAREN • stmt
   30               | IF O_PAREN expr C_PAREN • stmt ELSE stmt

    IF       shift, and go to state 36
    RETURN   shift, and go to state 37
    WHILE    shift, and go to state 38
    SEM_COL  shift, and go to state 39
    O_PAREN  shift, and go to state 40
    O_BRACE  shift, and go to state 26
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    compound_stmt   go to state 43
    stmt            go to state 99
    expr_stmt       go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    return_stmt     go to state 49
    expr            go to state 50
    var             go to state 51
    simple_expr     go to state 52
    add_expr        go to state 53
    term            go to state 54
    factor          go to state 55
    call            go to state 56


State 95

   31 iteration_stmt: WHILE O_PAREN expr C_PAREN • stmt

    IF       shift, and go to state 36
    RETURN   shift, and go to state 37
    WHILE    shift, and go to state 38
    SEM_COL  shift, and go to state 39
    O_PAREN  shift, and go to state 40
    O_BRACE  shift, and go to state 26
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    compound_stmt   go to state 43
    stmt            go to state 100
    expr_stmt       go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    return_stmt     go to state 49
    expr            go to state 50
    var             go to state 51
    simple_expr     go to state 52
    add_expr        go to state 53
    term            go to state 54
    factor          go to state 55
    call            go to state 56


State 96

   61 arg_list: expr COMMA • arg_list

    O_PAREN  shift, and go to state 40
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    expr         go to state 85
    var          go to state 51
    simple_expr  go to state 52
    add_expr     go to state 53
    term         go to state 54
    factor       go to state 55
    call         go to state 56
    arg_list     go to state 101


State 97

   58 call: ID O_PAREN args C_PAREN •

    $default  reduce using rule 58 (call)


State 98

   37 var: ID O_BRACK expr C_BRACK •

    $default  reduce using rule 37 (var)


State 99

   29 selection_stmt: IF O_PAREN expr C_PAREN stmt •
   30               | IF O_PAREN expr C_PAREN stmt • ELSE stmt

    ELSE  shift, and go to state 102

    ELSE      [reduce using rule 29 (selection_stmt)]
    $default  reduce using rule 29 (selection_stmt)


State 100

   31 iteration_stmt: WHILE O_PAREN expr C_PAREN stmt •

    $default  reduce using rule 31 (iteration_stmt)


State 101

   61 arg_list: expr COMMA arg_list •

    $default  reduce using rule 61 (arg_list)


State 102

   30 selection_stmt: IF O_PAREN expr C_PAREN stmt ELSE • stmt

    IF       shift, and go to state 36
    RETURN   shift, and go to state 37
    WHILE    shift, and go to state 38
    SEM_COL  shift, and go to state 39
    O_PAREN  shift, and go to state 40
    O_BRACE  shift, and go to state 26
    ID       shift, and go to state 41
    NUM      shift, and go to state 42

    compound_stmt   go to state 43
    stmt            go to state 103
    expr_stmt       go to state 46
    selection_stmt  go to state 47
    iteration_stmt  go to state 48
    return_stmt     go to state 49
    expr            go to state 50
    var             go to state 51
    simple_expr     go to state 52
    add_expr        go to state 53
    term            go to state 54
    factor          go to state 55
    call            go to state 56


State 103

   30 selection_stmt: IF O_PAREN expr C_PAREN stmt ELSE stmt •

    $default  reduce using rule 30 (selection_stmt)
